---
- name: install sudo
  apt:
    name: sudo
    state: present

- name: create local ssh_key_directory
  file:
    path: "{{ users_ssh_key_directory }}"
    state: directory
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key | bool
  delegate_to: localhost
  become: false

- name: manage users {{ user.name }}
  user:
    name: "{{ user.name }}"
    state: "{{ user.state | default('present') }}"
    comment: "{{ user.comment | default(omit) }}"
    password: "{{ user.password | default(omit) }}"
    uid: "{{ user.uid | default(omit) }}"
    group: "{{ user.group | default(omit) }}"
    groups: "{{ user.groups | default(omit) }}"
    shell: "{{ user.shell | default(users_shell) }}"
    update_password: "{{ user.update_password | default(omit) }}"
  register: users_manage_user

- name: set sudo options for {{ user.name }}
  template:
    src: sudo.j2
    dest: "/etc/sudoers.d/{{ user.name }}"
  when:
    - user.sudo_options is defined
  loop_control:
    label: "{{ user.name }}"

- name: remove sudo options for {{ user.name }}
  file:
    path: "/etc/sudoers.d/{{ user.name }}"
    state: absent
  when:
    - user.sudo_options is not defined
  loop_control:
    label: "{{ user.name }}"

- name: generate private ssh key for {{ user.name }}
  command: "{{ users_ssh_keygen_command }}"
  args:
    creates: "{{ users_ssh_key_directory }}/{{ user.name }}"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key | bool
  loop_control:
    label: "{{ user.name }}"
  delegate_to: localhost
  become: false

- name: generate public ssh key for {{ user.name }}
  shell: "{{ users_ssh_keygen_pubkey_command }} > {{ users_ssh_key_directory }}/{{ user.name }}.pub"
  args:
    creates: "{{ users_ssh_key_directory }}/{{ user.name }}.pub"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key | bool
  loop_control:
    label: "{{ user.name }}"
  delegate_to: localhost
  become: false

- name: read generated public ssh key for {{ user.name }}
  command: cat "{{ users_ssh_key_directory }}/{{ user.name }}.pub"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key | bool
  check_mode: false
  changed_when: false
  register: ssh_public_key
  delegate_to: localhost
  become: false
  loop_control:
    label: "{{ user.name }}"

- name: create .ssh directory for {{ user.name }}
  file:
    path: "/home/{{ user.name }}/.ssh"
    state: directory
    mode: "0700"
  become: true
  become_user: "{{ user.name }}"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key

- name: loop over authorized_key for {{ user.name }}
  include: user_authorized_key.yml
  when:
    - user.authorized_key is defined

- name: loop over  authorized_keys for {{ user.name }}
  include: user_authorized_key.yml
  loop: "{{ user.authorized_keys }}"
  loop_control:
    label: "{{ user.name }}"
    loop_var: authorized_key
  when:
    - user.authorized_keys is defined

- name: place generated ssh_public_key for {{ user.name }}
  authorized_key:
    user: "{{ user.name }}"
    state: present
    key: "{{ ssh_public_key.stdout }}"
  when:
    - ssh_public_key is defined
    - user.manage_ssh_key is defined
    - user.manage_ssh_key | bool
  loop_control:
    label: "{{ user.name }}"

- name: copy generated private ssh key for {{ user.name }}
  copy:
    src: "{{ users_ssh_key_directory }}/{{ user.name }}"
    dest: "/home/{{ user.name }}/.ssh/id_rsa"
    mode: "0400"
    owner: "{{ user.name }}"
    group: "{{ user.group | default(omit) }}"
  loop: "{{ lookup('dict', users_manage_user, wantlist=True) }}"
  when:
    - users_manage_user is defined
    - user.copy_private_key is defined
    - user.copy_private_key | bool
  loop_control:
    label: "{{ user.name }}"
